---
# tasks file for nebulon.kubernetes_prep

- name: Make .ssh directory for root user
  ansible.builtin.file:
    path: "/root/.ssh"
    state: directory

- name: Check for existing authorized_keys file
  ansible.builtin.stat: path=/root/.ssh/authorized_keys
  register: precondition
  changed_when: false

- name: Create empty authorized_keys file for root user account
  ansible.builtin.file:
    path: "/root/.ssh/authorized_keys"
    state: touch

- name: Copy public SSH key into root users authorized_keys file
  lineinfile:
    path: "/root/.ssh/authorized_keys"
    line: "{{ pubkey }}"

# Docker install and configuration
- name: Install prerequisite packages
  block:
    - name: update apt
      apt: 
        name:  
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - lsscsi
        state: present
        update_cache: yes
        cache_valid_time: 3600
  tags: apt
  
  rescue:
    - name: apt update error caught
      ansible.builtin.debug:
        msg: apt update failed to complete

    - name: Remove APT locks
      ansible.builtin.shell:
        cmd: |
          killall apt apt-get

    - name: retry update apt
      ansible.builtin.apt: 
        name:  
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes
        cache_valid_time: 3600

# The Docker key and repo must be added to install containerd
- name: Add Docker GPG key
  ansible.builtin.apt_key: 
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  register: apt_result
  until: apt_result is success
  retries: 5
  delay: 5
  ignore_errors: True

# The Docker key and repo must be added to install containerd
- name: Add Docker APT repository
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable
    state: present

- name: Add K8s GPG key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  register: apt_result
  until: apt_result is success
  retries: 5
  delay: 5
  ignore_errors: True

- name: Build sources list for apt on Ubuntu
  ansible.builtin.shell:
    cmd: |
      cat <<EOF | tee /etc/apt/sources.list.d/kubernetes.list
      deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
      EOF
    #changed_when: false

- name: Install Helm GPG Key
  ansible.builtin.apt_key:
    url: https://helm.baltorepo.com/organization/signing.asc
    state: present
  register: apt_result
  until: apt_result is success
  retries: 5
  delay: 5
  ignore_errors: True

- name: Determine Ubuntu Build
  ansible.builtin.shell: grep -i codename -m 1 /etc/os-release
  register: ubuntu_version
  changed_when: false
  tags: 
    - ubuntu_version
    - docker

- name: Install Helm for Ubuntu 
  ansible.builtin.shell:
    cmd: |
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      chmod 700 get_helm.sh
      ./get_helm.sh
  # when: "'focal' in ubuntu_version.stdout"

# Containerd configuration
# Populate containerd.conf file
- name: Populate /etc/modules-load.d/containerd.conf
  ansible.builtin.shell:
    cmd: |
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF

- name: Load br_netfilter module if not present
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Load overlay module if not present
  community.general.modprobe:
    name: overlay
    state: present

- name: Enable iptables to see briged traffic
  ansible.builtin.shell:
    cmd: |
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
    #changed_when: creates

- name: Reload sysctl to pick up iptables changes
  ansible.builtin.shell: "sysctl --system"
  changed_when: false

- name: Install container runtime Ubuntu 20
  ansible.builtin.apt:
    name: 
    - containerd.io
    state: present
    update_cache: yes
  # when: "('focal' in ubuntu_version.stdout) and (not docker_installed.stat.exists)"
  tags: docker

# Configure containerd
- name: Create /etc/containerd file
  file:
    path: "/etc/containerd"
    state: touch    

- name: Configure containerd
  shell: |
    containerd config default | tee /etc/containerd/config.toml

# Statically define systemd as cgroup driver for containerd
- name: Set runc as systemd cgroup driver
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    search_string: "SystemdCgroup = false"
    line: "            SystemdCgroup = true"
  tags: containerd

- name: Restart containerd
  systemd:
    state: restarted
    daemon_reload: yes
    name: containerd

#Kubernetes specific work
- name: Turn off swap device (required for K8s)
  ansible.builtin.shell: |
    swapoff -a

- name: Disable SWAP in fstab 
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.apt:
    name: 
    - kubelet={{k8sversion}}
    - kubeadm={{k8sversion}}
    - kubectl={{k8sversion}}
    state: present
    update_cache: yes

- name: Turn off firewall
  community.general.ufw: 
    state: disabled
